name: Security Hardening Tool CI Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run weekly security tests on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:
    inputs:
      test_level:
        description: 'Test level to run'
        required: true
        default: 'basic'
        type: choice
        options:
        - basic
        - comprehensive
        - audit-only

env:
  PYTHON_VERSION: '3.11'
  TEST_TIMEOUT: 30m

jobs:
  # ============================================================================
  # Code Quality and Unit Tests
  # ============================================================================
  code-quality:
    runs-on: ubuntu-latest
    name: Code Quality & Unit Tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        
    - name: Run setup validation
      run: |
        python setup_and_test.py --skip-root-check
        
    - name: Lint with flake8
      run: |
        flake8 hardening_tool/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 hardening_tool/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
        
    - name: Type checking with mypy
      run: |
        mypy hardening_tool/ --ignore-missing-imports || true
        
    - name: Security scan with bandit
      run: |
        bandit -r hardening_tool/ -f json -o bandit-report.json || true
        
    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-scan-results
        path: bandit-report.json

  # ============================================================================
  # Ubuntu 20.04 Security Tests
  # ============================================================================
  ubuntu-security-tests:
    runs-on: ubuntu-latest
    name: Ubuntu 20.04 Security Tests
    needs: code-quality
    
    strategy:
      matrix:
        test_category: [ssh, pam, system, firewall]
      fail-fast: false
      
    container:
      image: ubuntu:20.04
      options: --privileged
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Ubuntu container environment
      run: |
        export DEBIAN_FRONTEND=noninteractive
        apt-get update
        apt-get install -y \
          python3 \
          python3-pip \
          python3-venv \
          sudo \
          openssh-server \
          ufw \
          auditd \
          libpam-pwquality \
          rsyslog \
          systemd \
          curl \
          git
        
        # Create non-root user for testing
        useradd -m -s /bin/bash testuser
        echo "testuser:testpass123" | chpasswd
        usermod -aG sudo testuser
        
    - name: Install Python dependencies
      run: |
        python3 -m pip install --upgrade pip
        pip3 install -e ".[dev]"
        
    - name: Generate test rules for category
      run: |
        python3 -c "
        from hardening_tool.rules.loader import RuleLoader
        import os
        os.makedirs('rules/definitions', exist_ok=True)
        loader = RuleLoader('rules/definitions')
        loader._create_sample_rules()
        print('Sample rules created')
        "
        
    - name: Run SSH security tests
      if: matrix.test_category == 'ssh'
      run: |
        echo "=== SSH Security Audit Tests ==="
        python3 -m hardening_tool.cli audit \
          --rules ssh_disable_root_login,ssh_disable_password_auth,ssh_set_max_auth_tries \
          --dry-run \
          --output-format json \
          --output ssh_audit_results.json || true
        
        # Display results
        if [ -f ssh_audit_results.json ]; then
          echo "SSH Audit Results:"
          cat ssh_audit_results.json | python3 -m json.tool
        fi
        
    - name: Run PAM security tests  
      if: matrix.test_category == 'pam'
      run: |
        echo "=== PAM Security Audit Tests ==="
        
        # Test PAM password quality auditing
        python3 pam_pwquality_audit.py || true
        
        # Test hardening tool PAM rules
        python3 -m hardening_tool.cli audit \
          --rules pam_password_complexity,pam_password_history,pam_account_lockout \
          --dry-run \
          --output-format json \
          --output pam_audit_results.json || true
          
        if [ -f pam_audit_results.json ]; then
          echo "PAM Audit Results:"
          cat pam_audit_results.json | python3 -m json.tool
        fi
        
    - name: Run system hardening tests
      if: matrix.test_category == 'system'  
      run: |
        echo "=== System Hardening Audit Tests ==="
        
        # Test shadow file hardening (audit only)
        bash shadow_hardening.sh --audit-only || true
        
        # Test system-level rules
        python3 -m hardening_tool.cli audit \
          --rules system_disable_unused_filesystems,system_secure_boot_settings \
          --dry-run \
          --output-format json \
          --output system_audit_results.json || true
          
        if [ -f system_audit_results.json ]; then
          echo "System Audit Results:"
          cat system_audit_results.json | python3 -m json.tool
        fi
        
    - name: Run firewall tests
      if: matrix.test_category == 'firewall'
      run: |
        echo "=== Firewall Security Audit Tests ==="
        
        # Enable UFW for testing
        ufw --force enable || true
        
        python3 -m hardening_tool.cli audit \
          --rules firewall_enable_ufw,firewall_default_deny,firewall_log_denied \
          --dry-run \
          --output-format json \
          --output firewall_audit_results.json || true
          
        if [ -f firewall_audit_results.json ]; then
          echo "Firewall Audit Results:" 
          cat firewall_audit_results.json | python3 -m json.tool
        fi
        
    - name: Test dry-run apply operations
      run: |
        echo "=== Testing Dry-Run Apply Operations ==="
        
        # Test apply in dry-run mode (should not make changes)
        python3 -m hardening_tool.cli apply \
          --rules ssh_disable_root_login,pam_password_complexity \
          --dry-run \
          --output-format json \
          --output apply_dry_run_results.json || true
          
        if [ -f apply_dry_run_results.json ]; then
          echo "Dry-Run Apply Results:"
          cat apply_dry_run_results.json | python3 -m json.tool
        fi
        
    - name: Generate test report
      if: always()
      run: |
        echo "=== Generating Test Report ==="
        python3 -c "
        import json
        import os
        from datetime import datetime
        
        # Collect all test results
        results = {}
        for file in ['ssh_audit_results.json', 'pam_audit_results.json', 
                    'system_audit_results.json', 'firewall_audit_results.json',
                    'apply_dry_run_results.json']:
            if os.path.exists(file):
                with open(file, 'r') as f:
                    try:
                        results[file] = json.load(f)
                    except:
                        results[file] = 'Failed to parse JSON'
        
        # Create summary report
        report = {
            'timestamp': datetime.now().isoformat(),
            'platform': 'ubuntu:20.04',
            'test_category': '${{ matrix.test_category }}',
            'results': results
        }
        
        with open('ubuntu_test_report_${{ matrix.test_category }}.json', 'w') as f:
            json.dump(report, f, indent=2)
            
        print('Test report generated')
        "
        
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: ubuntu-test-results-${{ matrix.test_category }}
        path: |
          *_audit_results.json
          *_dry_run_results.json
          ubuntu_test_report_*.json

  # ============================================================================
  # CentOS 7 Security Tests  
  # ============================================================================
  centos-security-tests:
    runs-on: ubuntu-latest
    name: CentOS 7 Security Tests
    needs: code-quality
    
    strategy:
      matrix:
        test_category: [ssh, pam, system, firewall]
      fail-fast: false
      
    container:
      image: centos:7
      options: --privileged
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup CentOS container environment
      run: |
        yum update -y
        yum install -y \
          python3 \
          python3-pip \
          sudo \
          openssh-server \
          firewalld \
          audit \
          pam \
          rsyslog \
          systemd \
          curl \
          git \
          epel-release
          
        # Install additional packages from EPEL
        yum install -y python3-devel
        
        # Create non-root user for testing
        useradd -m -s /bin/bash testuser
        echo "testpass123" | passwd testuser --stdin
        usermod -aG wheel testuser
        
    - name: Install Python dependencies
      run: |
        python3 -m pip install --upgrade pip
        pip3 install -e ".[dev]"
        
    - name: Generate test rules for category
      run: |
        python3 -c "
        from hardening_tool.rules.loader import RuleLoader
        import os
        os.makedirs('rules/definitions', exist_ok=True)
        loader = RuleLoader('rules/definitions')
        loader._create_sample_rules()
        print('Sample rules created')
        "
        
    - name: Run SSH security tests
      if: matrix.test_category == 'ssh'
      run: |
        echo "=== SSH Security Audit Tests (CentOS) ==="
        systemctl start sshd || true
        
        python3 -m hardening_tool.cli audit \
          --rules ssh_disable_root_login,ssh_disable_password_auth,ssh_set_max_auth_tries \
          --dry-run \
          --output-format json \
          --output centos_ssh_audit_results.json || true
        
        if [ -f centos_ssh_audit_results.json ]; then
          echo "CentOS SSH Audit Results:"
          cat centos_ssh_audit_results.json | python3 -m json.tool
        fi
        
    - name: Run PAM security tests
      if: matrix.test_category == 'pam'
      run: |
        echo "=== PAM Security Audit Tests (CentOS) ==="
        
        # Test PAM password quality auditing
        python3 pam_pwquality_audit.py || true
        
        python3 -m hardening_tool.cli audit \
          --rules pam_password_complexity,pam_password_history,pam_account_lockout \
          --dry-run \
          --output-format json \
          --output centos_pam_audit_results.json || true
          
        if [ -f centos_pam_audit_results.json ]; then
          echo "CentOS PAM Audit Results:"
          cat centos_pam_audit_results.json | python3 -m json.tool
        fi
        
    - name: Run system hardening tests
      if: matrix.test_category == 'system'
      run: |
        echo "=== System Hardening Audit Tests (CentOS) ==="
        
        # Test shadow file hardening (audit only)
        bash shadow_hardening.sh --audit-only || true
        
        python3 -m hardening_tool.cli audit \
          --rules system_disable_unused_filesystems,system_secure_boot_settings \
          --dry-run \
          --output-format json \
          --output centos_system_audit_results.json || true
          
        if [ -f centos_system_audit_results.json ]; then
          echo "CentOS System Audit Results:"
          cat centos_system_audit_results.json | python3 -m json.tool
        fi
        
    - name: Run firewall tests
      if: matrix.test_category == 'firewall'
      run: |
        echo "=== Firewall Security Audit Tests (CentOS) ==="
        
        # Start firewalld
        systemctl start firewalld || true
        
        python3 -m hardening_tool.cli audit \
          --rules firewall_enable_firewalld,firewall_default_zone,firewall_log_denied \
          --dry-run \
          --output-format json \
          --output centos_firewall_audit_results.json || true
          
        if [ -f centos_firewall_audit_results.json ]; then
          echo "CentOS Firewall Audit Results:"
          cat centos_firewall_audit_results.json | python3 -m json.tool
        fi
        
    - name: Test dry-run apply operations
      run: |
        echo "=== Testing Dry-Run Apply Operations (CentOS) ==="
        
        python3 -m hardening_tool.cli apply \
          --rules ssh_disable_root_login,pam_password_complexity \
          --dry-run \
          --output-format json \
          --output centos_apply_dry_run_results.json || true
          
        if [ -f centos_apply_dry_run_results.json ]; then
          echo "CentOS Dry-Run Apply Results:"
          cat centos_apply_dry_run_results.json | python3 -m json.tool
        fi
        
    - name: Generate test report
      if: always()
      run: |
        echo "=== Generating CentOS Test Report ==="
        python3 -c "
        import json
        import os
        from datetime import datetime
        
        # Collect all test results
        results = {}
        for file in ['centos_ssh_audit_results.json', 'centos_pam_audit_results.json', 
                    'centos_system_audit_results.json', 'centos_firewall_audit_results.json',
                    'centos_apply_dry_run_results.json']:
            if os.path.exists(file):
                with open(file, 'r') as f:
                    try:
                        results[file] = json.load(f)
                    except:
                        results[file] = 'Failed to parse JSON'
        
        # Create summary report
        report = {
            'timestamp': datetime.now().isoformat(),
            'platform': 'centos:7',
            'test_category': '${{ matrix.test_category }}',
            'results': results
        }
        
        with open('centos_test_report_${{ matrix.test_category }}.json', 'w') as f:
            json.dump(report, f, indent=2)
            
        print('CentOS test report generated')
        "
        
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: centos-test-results-${{ matrix.test_category }}
        path: |
          centos_*_audit_results.json
          centos_*_dry_run_results.json
          centos_test_report_*.json

  # ============================================================================
  # Comprehensive Testing (Manual Trigger)
  # ============================================================================
  comprehensive-tests:
    runs-on: ubuntu-latest
    name: Comprehensive Security Tests
    needs: [ubuntu-security-tests, centos-security-tests]
    if: github.event.inputs.test_level == 'comprehensive' || github.event_name == 'schedule'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all test results
      uses: actions/download-artifact@v3
      with:
        path: test-results/
        
    - name: Generate comprehensive report
      run: |
        python3 -c "
        import json
        import os
        from datetime import datetime
        from pathlib import Path
        
        # Collect all test results
        all_results = {}
        results_dir = Path('test-results')
        
        for result_dir in results_dir.iterdir():
            if result_dir.is_dir():
                platform = 'ubuntu' if 'ubuntu' in result_dir.name else 'centos'
                category = result_dir.name.split('-')[-1]
                
                for json_file in result_dir.glob('*.json'):
                    key = f'{platform}_{category}_{json_file.name}'
                    try:
                        with open(json_file, 'r') as f:
                            all_results[key] = json.load(f)
                    except Exception as e:
                        all_results[key] = f'Error: {str(e)}'
        
        # Create comprehensive summary
        summary = {
            'timestamp': datetime.now().isoformat(),
            'test_type': 'comprehensive',
            'platforms_tested': ['ubuntu:20.04', 'centos:7'],
            'categories_tested': ['ssh', 'pam', 'system', 'firewall'],
            'total_test_files': len(all_results),
            'results': all_results
        }
        
        with open('comprehensive_test_summary.json', 'w') as f:
            json.dump(summary, f, indent=2)
            
        print(f'Comprehensive report generated with {len(all_results)} test results')
        "
        
    - name: Upload comprehensive results
      uses: actions/upload-artifact@v3
      with:
        name: comprehensive-test-summary
        path: comprehensive_test_summary.json

  # ============================================================================
  # Test Results Summary
  # ============================================================================
  test-summary:
    runs-on: ubuntu-latest
    name: Test Results Summary
    needs: [ubuntu-security-tests, centos-security-tests]
    if: always()
    
    steps:
    - name: Download all test artifacts
      uses: actions/download-artifact@v3
      with:
        path: all-test-results/
        
    - name: Generate test summary
      run: |
        echo "# Security Hardening Tool Test Summary" > test_summary.md
        echo "" >> test_summary.md
        echo "**Date:** $(date)" >> test_summary.md
        echo "**Commit:** ${{ github.sha }}" >> test_summary.md
        echo "" >> test_summary.md
        
        echo "## Test Artifacts Generated:" >> test_summary.md
        find all-test-results/ -name "*.json" | sort >> test_summary.md
        echo "" >> test_summary.md
        
        echo "## Test Coverage:" >> test_summary.md
        echo "- ✅ Ubuntu 20.04 Security Tests" >> test_summary.md
        echo "- ✅ CentOS 7 Security Tests" >> test_summary.md
        echo "- ✅ SSH Hardening Rules" >> test_summary.md
        echo "- ✅ PAM Security Rules" >> test_summary.md
        echo "- ✅ System Hardening Rules" >> test_summary.md
        echo "- ✅ Firewall Configuration Rules" >> test_summary.md
        echo "- ✅ Dry-Run Apply Operations" >> test_summary.md
        
        cat test_summary.md
        
    - name: Upload test summary
      uses: actions/upload-artifact@v3
      with:
        name: test-summary
        path: test_summary.md